How to compile and run (assuming from linux command line):
	I recommend running this all on tux, with the server on one tux node and the clients on other tux nodes. The Service Discovery works well on tux, and everything should work with just default configuration (no command line arguments) there.
	Requirements:
		Python 3.6 (available at /home/graybill/bin/python3.6 on tux, easily installable)
		virtualenv (available on tux, easily installable)
	Steps to install:
		1. Create a virtual environment and activate it
			venv -p /path/to/python3.6 venv
			source venv/bin/activate
		2. Install the package
			pip install -e /path/to/root/of/package # The folder with setup.py in it
	Steps to run the server:
		1. Start the server
			server # The executable should be in your path after installing the package
			# The server will default to binding to all interfaces, TCP port 8864
			# run server --help to see all configurable options
	Steps to run client:
		1. Start the client
			client # The executable should be in your path after installing the package
			# The client will attempt to figure out the server's location using service discovery assuming it is running
			# run client --help to see all configurable options
	Example usernames and passwords (username, password):
		cam, mac
		jen, nej
		kain, niak
		andrei, ierdna
		neil, lien
		safa, afas
		colbert, trebloc
		khanh, hnahk
Assignment Robustness
	My assignment is not very hard to crack through fuzzing. It deals with incorrect messages fairly well, however it falls apart when sending many valid messages. A chain of Connect -> LogOut -> Connect -> LogOut -> ... messages as fast as possible will significantly slow down the server. However, other clients should still be serviced. The one case where other clients will not be serviced is when a single client sends a large chain of Connect/LogOut messages in a single TCP message. Then the server will be stuck dealing with that client until it gets to the end of the buffer. I tested robustness by connecting a few clients to the server (up to a maximum of 7) and having each client send different valid and invalid messages in both small (incomplete messages) and large (multiple messages at once) amounts.
Service Discovery (EXTRA CREDIT)
	I did implement service discovery. This will work on tux, and worked on my home network however did not work on dragonfly3. The implementation of it is in the Advertiser class on the server (server/advertiser.py) and in the listen_for_address function in the client (client/__main__.py). The basic idea is the server does a UDP broadcast on a port (default to 8864) and then when the client is looking for a server to connect to, it listens to UDP (default port 8864) for a few seconds to wait for a packet. If it received a packet, then the sender of that packet is the one to connect to.